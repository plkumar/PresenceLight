@page "/lifx"

@inject LIFXService _lifxService
@inject AppState appState
@inject IModalService Modal
@inject IOptionsMonitor<ConfigWrapper> Config


<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div class="centering text-center">
                    <h1 class="centering text-center">Configure LIFX</h1>
                    <br />
                    <br />
                    <input type="checkbox" checked="@Config.CurrentValue.IsLIFXEnabled" @bind-value="@Config.CurrentValue.IsLIFXEnabled" /> Connect to LIFX
                    <br />
                    <br />
                    @if (Config.CurrentValue.IsLIFXEnabled)
                    {

                        <div class="row">
                            <div class="col-4 text-right">
                                <h5>LIFX Token</h5>
                            </div>
                            <div class="col-8">
                                <input style="width: 75%" @bind-value="@Config.CurrentValue.LIFXApiKey" type="text" /> <a href="https://cloud.lifx.com/settings" target="_blank">Get Token</a>
                            </div>
                        </div>
                        <br /><br />
                        @if (!string.IsNullOrEmpty(Config.CurrentValue.LIFXApiKey))
                        {
                            <button @onclick="@((ev) => CheckLIFX("Lights"))" class="btn btn-primary" type="submit">Get Lights</button>

                            <button @onclick="@((ev) => CheckLIFX("Groups"))" class="btn btn-primary" type="submit">Get Groups</button>
                        }
                        @if (appState.LIFXLights != null)
                        {
                            <br /><br />

                            @if (showLifxMessage)
                            {
                                <span class="@lifxMessageClass">@lifxMessage</span>
                            }

                            <br /><br />
                            <div class="form-group col-3 centering text-center">
                                <select class="form-control" @onchange="OnChange">
                                    <option disabled="disabled">Select</option>
                                    @foreach (var light in appState.LIFXLights)
                                    {
                                        if (light.GetType() == typeof(LifxCloud.NET.Models.Group))
                                        {
                                            var obj = (LifxCloud.NET.Models.Group)light;

                                            @if (Config.CurrentValue.SelectedLIFXItemId == obj.Id)
                                            {
                                                <option selected="selected" value=group_id:@obj.Id>@obj.Label</option>
                                            }
                                            else
                                            {
                                                <option value=group_id:@obj.Id>@obj.Label</option>
                                            }
                                        }
                                        else
                                        {
                                            var obj = (LifxCloud.NET.Models.Light)light;

                                            @if (Config.CurrentValue.SelectedLIFXItemId == obj.Id)
                                            {
                                                <option selected="selected" value=id:@obj.Id>@obj.Label</option>
                                            }
                                            else
                                            {
                                                <option value=id:@obj.Id>@obj.Label</option>
                                            }
                                        }

                                    }
                                </select>
                            </div>
                        }
                        <br />
                        <br />
                        @if (!string.IsNullOrEmpty(Config.CurrentValue.LIFXApiKey))
                        {
                            <button class="btn btn-primary" @onclick="Save">Save LIFX Settings</button>
                        }
                        <br />
                        <br />
                        @if (settingsSaved)
                        {
                            <span class="text-success">@message</span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    bool settingsSaved = false;
    string message;
    string lifxMessageClass;

    bool showLifxMessage = false;
    string lifxMessage;
    private void Save()
    {
        System.IO.File.WriteAllText($"{System.IO.Directory.GetCurrentDirectory()}/AADSettings.json", JsonConvert.SerializeObject(Config.CurrentValue));
        message = "Settings Saved";
        settingsSaved = true;
    }

    async Task CheckLIFX(string type)
    {
        if (!string.IsNullOrEmpty(Config.CurrentValue.LIFXApiKey))
        {
            try
            {
                if (type == "Groups")
                {
                    appState.SetLIFXLights(await _lifxService.GetAllGroupsAsync());
                }
                else
                {
                    appState.SetLIFXLights(await _lifxService.GetAllLightsAsync());
                }

                showLifxMessage = true;
                lifxMessage = "Connected to LIFX Cloud";
                lifxMessageClass = "text-success";
            }
            catch (Exception ex)
            {
                //DiagnosticsClient.TrackException(ex);
                showLifxMessage = true;
                lifxMessage = "Error Occured Connecting to LIFX, please try again";
                lifxMessageClass = "text-danger";
                this.StateHasChanged();
                appState.SetLIFXLights(new List<LifxCloud.NET.Models.Light>());
            }

        }
    }


    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        Config.CurrentValue.SelectedLIFXItemId = light;
        appState.SetLIFXLight(light);
    }

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += RaiseStateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
