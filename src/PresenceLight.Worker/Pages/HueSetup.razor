@page "/hue"

@inject IHueService _hueService
@inject AppState appState
@inject IModalService Modal
@inject IOptionsMonitor<ConfigWrapper> Config


<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div class="centering text-center">
                    <h1 class="centering text-center">Configure Phillips Hue</h1>
                    <br />
                    <br />
                    <input type="checkbox" checked="@Config.CurrentValue.IsPhillipsEnabled" @bind-value="@Config.CurrentValue.IsPhillipsEnabled" /> Connect to Phillips Hue
                    <br />
                    <br />
                    @if (Config.CurrentValue.IsPhillipsEnabled)
                    {
                        <EditForm Model="@tempConfig" OnValidSubmit="RegisterBridge">


                            <InputText id="name" @bind-Value="@tempConfig.HueIpAddress" />
                            <br />
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <br />
                            <br />
                            <button class="btn btn-primary" type="submit">Register Bridge</button>
                        </EditForm>

                        <br />

                        @if (showHueMessage)
                        {
                            <span class="@hueMessageClass">@hueMessage</span>
                        }
                        <br />
                        <br />
                        @if (appState.HueLights != null)
                        {
                            <div class="form-group col-3 centering text-center">
                                <select class="form-control" @onchange="OnChange">
                                    <option disabled="disabled">Select</option>
                                    @foreach (var light in appState.HueLights)
                                    {
                                        @if (tempConfig.SelectedHueLightId == light.Id)
                                        {
                                            <option selected="selected" value=@light.Id>@light.Name</option>
                                        }
                                        else
                                        {
                                            <option value=@light.Id>@light.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        }

                        <br />
                        @if (!string.IsNullOrEmpty(tempConfig.HueApiKey))
                        {
                            <button class="btn btn-primary" @onclick="Save">Save Hue Settings</button>
                        }
                        <br />
                        <br />
                        @if (settingsSaved)
                        {
                            <span class="text-success">@message</span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private ConfigWrapper tempConfig;

    private void Save()
    {
        System.IO.File.WriteAllText($"{System.IO.Directory.GetCurrentDirectory()}/AADSettings.json", JsonConvert.SerializeObject(Config.CurrentValue));
        _hueService = new HueService(Config.CurrentValue);
        message = "Settings Saved";
        settingsSaved = true;
    }

    bool settingsSaved = false;
    string message;
    string hueMessageClass;

    bool showHueMessage = false;
    string hueMessage;

    async Task RegisterBridge()
    {
        var formModal = Modal.Show<Confirm>("Please press the sync button on your Phillips Hue Bridge");
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            try
            {
                tempConfig.HueApiKey = await _hueService.RegisterBridge();
            }
            catch
            {
                hueMessage = "Error Occured registering bridge, please try again";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }

            if (!string.IsNullOrEmpty(tempConfig.HueApiKey))
            {
                showHueMessage = true;
                hueMessage = "App Registered with Bridge";
                hueMessageClass = "text-success";

                Config.CurrentValue.HueIpAddress = tempConfig.HueIpAddress;
                Config.CurrentValue.HueApiKey = tempConfig.HueApiKey;

                System.IO.File.WriteAllText($"{System.IO.Directory.GetCurrentDirectory()}/AADSettings.json", JsonConvert.SerializeObject(Config.CurrentValue));

                appState.SetHueLights(await _hueService.CheckLights());
            }
            else
            {
                hueMessage = "Api Key Not Created, please try again and ensure you press the sync button on your bridge";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }
        }
    }

    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        tempConfig.SelectedHueLightId = light;
        Config.CurrentValue.SelectedHueLightId = light;
        appState.SetHueLight(light);
    }

    protected override async Task OnInitializedAsync()
    {
        tempConfig = Config.CurrentValue;

        if (!string.IsNullOrEmpty(tempConfig.HueApiKey))
        {
            appState.SetHueLights(await _hueService.CheckLights());
        }

        appState.OnChange += RaiseStateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
